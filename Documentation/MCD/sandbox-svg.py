#!/usr/bin/env python
# encoding: utf-8
# Generated by Mocodo 1.4.1 on Thu, 31 Jan 2013 14:45:29

import time, codecs

(width,height) = (380,134)
cx = {
	u'CONFIGURATION':   65,
	u'ASSOCIER'     :  189,
	u'PARAMETRES'   :  314,
}
cy = {
	u'CONFIGURATION':   67,
	u'ASSOCIER'     :   67,
	u'PARAMETRES'   :   67,
}
k = {
	u'ASSOCIER,CONFIGURATION':  1.00,
	u'ASSOCIER,PARAMETRES'   :  1.00,
}
colors  = {
	u'associationAttributeTextColor': u'#607734',
	u'associationCartoucheColor'    : u'#b2bba4',
	u'associationCartoucheTextColor': u'#27360c',
	u'associationColor'             : u'#ccd6ba',
	u'associationStrokeColor'       : u'#85956b',
	u'backgroundColor'              : None,
	u'cardTextColor'                : u'#726f83',
	u'entityAttributeTextColor'     : u'#3e3c42',
	u'entityCartoucheColor'         : u'#97b8ff',
	u'entityCartoucheTextColor'     : u'#131114',
	u'entityColor'                  : u'#c0d4ff',
	u'entityStrokeColor'            : u'#578dff',
	u'labelTextColor'               : u'#726f83',
	u'legStrokeColor'               : u'#726f83',
	u'transparentColor'             : u'none',
}
cardMaxWidth = 21
cardMaxHeight = 14
cardMargin = 5
arrowWidth = 12
arrowHalfHeight = 6
arrowAxis = 8

def cardPos(ex,ey,ew,eh,ax,ay,k):
	if ax!=ex and abs(float(ay-ey)/(ax-ex)) < float(eh)/ew:
		(x0,x1) = (ex+cmp(ax,ex)*(ew+cardMargin), ex+cmp(ax,ex)*(ew+cardMargin+cardMaxWidth))
		(y0,y1) = sorted([ey+(x0-ex)*(ay-ey)/(ax-ex), ey+(x1-ex)*(ay-ey)/(ax-ex)])
		return (min(x0,x1),(y0+y1-cardMaxHeight+k*abs(y1-y0+cardMaxHeight))/2+cmp(k,0)*cardMargin)
	else:
		(y0,y1) = (ey+cmp(ay,ey)*(eh+cardMargin), ey+cmp(ay,ey)*(eh+cardMargin+cardMaxHeight))
		(x0,x1) = sorted([ex+(y0-ey)*(ax-ex)/(ay-ey), ex+(y1-ey)*(ax-ex)/(ay-ey)])
		return ((x0+x1-cardMaxWidth+k*abs(x1-x0+cardMaxWidth))/2+cmp(k,0)*cardMargin,min(y0,y1))

def lineArrow(x0,y0,x1,y1,t):
	(x,y) = (t*x0+(1-t)*x1,t*y0+(1-t)*y1)
	return arrow(x,y,x1-x0,y0-y1)
	
def curveArrow(x0,y0,x1,y1,x2,y2,x3,y3,t):
	(cx,cy) = (3*(x1-x0),3*(y1-y0))
	(bx,by) = (3*(x2-x1)-cx,3*(y2-y1)-cy)
	(ax,ay) = (x3-x0-cx-bx,y3-y0-cy-by)
	t = 1-t
	bezier  = lambda t: (ax*t*t*t + bx*t*t + cx*t + x0, ay*t*t*t + by*t*t + cy*t + y0)
	(x,y) = bezier(t)
	u = 1.0
	while t < u:
		m = (u+t)/2.0
		(xc,yc) = bezier(m)
		d = ((x-xc)**2+(y-yc)**2)**0.5
		if abs(d-arrowAxis) < 0.01:
			break
		if d > arrowAxis:
			u = m
		else:
			t = m
	return arrow(x,y,xc-x,y-yc)

def upperRoundRect(x,y,w,h,r):
	return " ".join([unicode(x) for x in ["M",x+w-r,y,"a",r,r,90,0,1,r,r,"V",y+h,"h",-w,"V",y+r,"a",r,r,90,0,1,r,-r]])

def lowerRoundRect(x,y,w,h,r):
	return " ".join([unicode(x) for x in ["M",x+w,y,"v",h-r,"a",r,r,90,0,1,-r,r,"H",x+r,"a",r,r,90,0,1,-r,-r,"V",y,"H",w]])

def arrow(x,y,a,b):
	c = (a*a+b*b)**0.5
	(cos,sin) = (a/c,b/c)
	return " ".join([unicode(x) for x in [
		"M",x,y,
		"L",x+arrowWidth*cos-arrowHalfHeight*sin,y-arrowHalfHeight*cos-arrowWidth*sin,
		"L",x+arrowAxis*cos,y-arrowAxis*sin,
		"L",x+arrowWidth*cos+arrowHalfHeight*sin,y+arrowHalfHeight*cos-arrowWidth*sin,
		"Z"
	]])


lines = '<?xml version="1.0" standalone="no"?>\n<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"\n"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">'
lines += '\n\n<svg width="%s" height="%s" viewBox="0 0 %s %s"\nxmlns="http://www.w3.org/2000/svg"\nxmlns:link="http://www.w3.org/1999/xlink">' % (width,height,width,height)
lines += '\n\n<desc>Generated by Mocodo 1.4.1 on %s</desc>' % time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime())
lines += '\n\n<rect x="0" y="0" width="%s" height="%s" fill="%s" stroke="none" stroke-width="0"/>' % (width,height,colors['backgroundColor'] if colors['backgroundColor'] else "none")

lines += u'\n\n<!-- Association ASSOCIER -->'
(x,y) = (cx[u"ASSOCIER"],cy[u"ASSOCIER"])
(ex,ey) = (cx[u"CONFIGURATION"],cy[u"CONFIGURATION"])
lines += u'\n<line x1="%(x0)s" y1="%(y0)s" x2="%(x1)s" y2="%(y1)s" stroke="%(strokeColor)s" stroke-width="1"/>' % {'x0': ex, 'y0': ey, 'x1': x, 'y1': y, 'strokeColor': colors['legStrokeColor']}
(tx,ty) = cardPos(ex,11.9+ey,56,58,x,11.9+y,k[u"ASSOCIER,CONFIGURATION"])
lines += u'\n<text x="%(tx)s" y="%(ty)s" fill="%(textColor)s" font-family="Verdana" font-size="12">1,N</text>' % {'tx': tx, 'ty': ty, 'textColor': colors['cardTextColor']}
(ex,ey) = (cx[u"PARAMETRES"],cy[u"PARAMETRES"])
lines += u'\n<line x1="%(x0)s" y1="%(y0)s" x2="%(x1)s" y2="%(y1)s" stroke="%(strokeColor)s" stroke-width="1"/>' % {'x0': ex, 'y0': ey, 'x1': x, 'y1': y, 'strokeColor': colors['legStrokeColor']}
(tx,ty) = cardPos(ex,11.9+ey,57,58,x,11.9+y,k[u"ASSOCIER,PARAMETRES"])
lines += u'\n<text x="%(tx)s" y="%(ty)s" fill="%(textColor)s" font-family="Verdana" font-size="12">1,1</text>' % {'tx': tx, 'ty': ty, 'textColor': colors['cardTextColor']}
lines += u'\n<g id="association-ASSOCIER">' % {}
path = upperRoundRect(-37+x,-28+y,74,28,14)
lines += u'\n	<path d="%(path)s" fill="%(color)s" stroke="%(strokeColor)s" stroke-width="0"/>' % {'path': path, 'color': colors['associationCartoucheColor'], 'strokeColor': colors['associationCartoucheColor']}
path = lowerRoundRect(-37+x,0+y,74,28,14)
lines += u'\n	<path d="%(path)s" fill="%(color)s" stroke="%(strokeColor)s" stroke-width="0"/>' % {'path': path, 'color': colors['associationColor'], 'strokeColor': colors['associationColor']}
lines += u'\n	<rect x="%(x)s" y="%(y)s" width="74" height="56" fill="%(color)s" rx="14" stroke="%(strokeColor)s" stroke-width="1.5"/>' % {'x': -37+x, 'y': -28+y, 'color': colors['transparentColor'], 'strokeColor': colors['associationStrokeColor']}
lines += u'\n	<line x1="%(x0)s" y1="%(y0)s" x2="%(x1)s" y2="%(y1)s" stroke="%(strokeColor)s" stroke-width="1"/>' % {'x0': -37+x, 'y0': 0+y, 'x1': 37+x, 'y1': 0+y, 'strokeColor': colors['associationStrokeColor']}
lines += u'\n	<text x="%(x)s" y="%(y)s" fill="%(textColor)s" font-family="Trebuchet MS" font-size="14">ASSOCIER</text>' % {'x': -30+x, 'y': -7.7+y, 'textColor': colors['associationCartoucheTextColor']}
lines += u'\n</g>' % {}

lines += u'\n\n<!-- Entity PARAMETRES -->'
(x,y) = (cx[u"PARAMETRES"],cy[u"PARAMETRES"])
lines += u'\n<g id="entity-PARAMETRES">' % {}
lines += u'\n	<g id="frame-PARAMETRES">' % {}
lines += u'\n		<rect x="%(x)s" y="%(y)s" width="114" height="28" fill="%(color)s" stroke="%(strokeColor)s" stroke-width="0"/>' % {'x': -57+x, 'y': -58+y, 'color': colors['entityCartoucheColor'], 'strokeColor': colors['entityCartoucheColor']}
lines += u'\n		<rect x="%(x)s" y="%(y)s" width="114" height="88" fill="%(color)s" stroke="%(strokeColor)s" stroke-width="0"/>' % {'x': -57+x, 'y': -30+y, 'color': colors['entityColor'], 'strokeColor': colors['entityColor']}
lines += u'\n		<rect x="%(x)s" y="%(y)s" width="114" height="116" fill="%(color)s" stroke="%(strokeColor)s" stroke-width="1.5"/>' % {'x': -57+x, 'y': -58+y, 'color': colors['transparentColor'], 'strokeColor': colors['entityStrokeColor']}
lines += u'\n		<line x1="%(x0)s" y1="%(y0)s" x2="%(x1)s" y2="%(y1)s" stroke="%(strokeColor)s" stroke-width="1"/>' % {'x0': -57+x, 'y0': -30+y, 'x1': 57+x, 'y1': -30+y, 'strokeColor': colors['entityStrokeColor']}
lines += u'\n	</g>' % {}
lines += u'\n	<text x="%(x)s" y="%(y)s" fill="%(textColor)s" font-family="Trebuchet MS" font-size="14">PARAMETRES</text>' % {'x': -42+x, 'y': -37.7+y, 'textColor': colors['entityCartoucheTextColor']}
lines += u'\n	<text x="%(x)s" y="%(y)s" fill="%(textColor)s" font-family="Trebuchet MS" font-size="14">id_configuration</text>' % {'x': -52+x, 'y': -9.7+y, 'textColor': colors['entityAttributeTextColor']}
lines += u'\n	<line x1="%(x0)s" y1="%(y0)s" x2="%(x1)s" y2="%(y1)s" stroke="%(strokeColor)s" stroke-width="1"/>' % {'x0': -52+x, 'y0': -7.0+y, 'x1': 52+x, 'y1': -7.0+y, 'strokeColor': colors['entityAttributeTextColor']}
lines += u'\n	<text x="%(x)s" y="%(y)s" fill="%(textColor)s" font-family="Trebuchet MS" font-size="14">nb_pas</text>' % {'x': -52+x, 'y': 10.3+y, 'textColor': colors['entityAttributeTextColor']}
lines += u'\n	<text x="%(x)s" y="%(y)s" fill="%(textColor)s" font-family="Trebuchet MS" font-size="14">vitesse</text>' % {'x': -52+x, 'y': 30.3+y, 'textColor': colors['entityAttributeTextColor']}
lines += u'\n	<text x="%(x)s" y="%(y)s" fill="%(textColor)s" font-family="Trebuchet MS" font-size="14">taille_grille</text>' % {'x': -52+x, 'y': 50.3+y, 'textColor': colors['entityAttributeTextColor']}
lines += u'\n</g>' % {}

lines += u'\n\n<!-- Entity CONFIGURATION -->'
(x,y) = (cx[u"CONFIGURATION"],cy[u"CONFIGURATION"])
lines += u'\n<g id="entity-CONFIGURATION">' % {}
lines += u'\n	<g id="frame-CONFIGURATION">' % {}
lines += u'\n		<rect x="%(x)s" y="%(y)s" width="112" height="28" fill="%(color)s" stroke="%(strokeColor)s" stroke-width="0"/>' % {'x': -56+x, 'y': -58+y, 'color': colors['entityCartoucheColor'], 'strokeColor': colors['entityCartoucheColor']}
lines += u'\n		<rect x="%(x)s" y="%(y)s" width="112" height="88" fill="%(color)s" stroke="%(strokeColor)s" stroke-width="0"/>' % {'x': -56+x, 'y': -30+y, 'color': colors['entityColor'], 'strokeColor': colors['entityColor']}
lines += u'\n		<rect x="%(x)s" y="%(y)s" width="112" height="116" fill="%(color)s" stroke="%(strokeColor)s" stroke-width="1.5"/>' % {'x': -56+x, 'y': -58+y, 'color': colors['transparentColor'], 'strokeColor': colors['entityStrokeColor']}
lines += u'\n		<line x1="%(x0)s" y1="%(y0)s" x2="%(x1)s" y2="%(y1)s" stroke="%(strokeColor)s" stroke-width="1"/>' % {'x0': -56+x, 'y0': -30+y, 'x1': 56+x, 'y1': -30+y, 'strokeColor': colors['entityStrokeColor']}
lines += u'\n	</g>' % {}
lines += u'\n	<text x="%(x)s" y="%(y)s" fill="%(textColor)s" font-family="Trebuchet MS" font-size="14">CONFIGURATION</text>' % {'x': -51+x, 'y': -37.7+y, 'textColor': colors['entityCartoucheTextColor']}
lines += u'\n	<text x="%(x)s" y="%(y)s" fill="%(textColor)s" font-family="Trebuchet MS" font-size="14">cellule</text>' % {'x': -51+x, 'y': -9.7+y, 'textColor': colors['entityAttributeTextColor']}
lines += u'\n	<line x1="%(x0)s" y1="%(y0)s" x2="%(x1)s" y2="%(y1)s" stroke="%(strokeColor)s" stroke-width="1"/>' % {'x0': -51+x, 'y0': -7.0+y, 'x1': -11+x, 'y1': -7.0+y, 'strokeColor': colors['entityAttributeTextColor']}
lines += u'\n	<text x="%(x)s" y="%(y)s" fill="%(textColor)s" font-family="Trebuchet MS" font-size="14">pos_x</text>' % {'x': -51+x, 'y': 10.3+y, 'textColor': colors['entityAttributeTextColor']}
lines += u'\n	<text x="%(x)s" y="%(y)s" fill="%(textColor)s" font-family="Trebuchet MS" font-size="14">pos_y</text>' % {'x': -51+x, 'y': 30.3+y, 'textColor': colors['entityAttributeTextColor']}
lines += u'\n	<text x="%(x)s" y="%(y)s" fill="%(textColor)s" font-family="Trebuchet MS" font-size="14">etat</text>' % {'x': -51+x, 'y': 50.3+y, 'textColor': colors['entityAttributeTextColor']}
lines += u'\n</g>' % {}
lines += u'\n</svg>'

import codecs
codecs.open("sandbox.svg","w","utf8").write(lines)
print 'Output file sandbox.svg successfully generated.'