#!/usr/bin/env python
# encoding: utf-8

import codecs
import time
import tables
import os
try:
	import json
except ImportError:
	import simplejson as json

version = "1.4.1"

class Common:
	
	def __init__(self, params):
		self.params = params
	
	def timeStamp(self):
		return "Generated by Mocodo %s on %s" % (version,time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime()))
	
	def loadInputFile(self):
		encodings = (self.params["encoding"] if type(self.params["encoding"]) is list else [self.params["encoding"]])
		for encoding in encodings:
			try:
				self.encoding = encoding
				return codecs.open(self.params["input"],encoding=encoding).read().split("\n")
			except UnicodeDecodeError:
				pass
	
	def loadStyle(self):
		style = {}
		style.update(json.loads(codecs.open("colors/%s.json" % self.params["colors"],"r","utf8").read()))
		style.update(json.loads(codecs.open("shapes/%s.json" % self.params["shapes"],"r","utf8").read()))
		style.update({"attraction":self.params["attraction"]})
		return style
	
	def dumpOutputFile(self,result):
		codecs.open(self.params["output"],"w",encoding="utf8").write(result)
		print "Output file %s successfully generated." % self.params["output"]
	
	def dumpMldFiles(self, mcd):
		names = (self.params["table"] if type(self.params["table"]) is list else [self.params["table"]])
		mldFormats = []
		for name in names:
			try:
				mldFormats.append(json.loads(open("tables/%s.json" % name).read()))
			except:
				print "Problem with format %s" % name
		t = tables.Tables(mcd)
		try:
			t.processAll()
			baseName = os.path.splitext(self.params["output"])[0]
			for mldFormat in mldFormats:
				text = t.getText(mldFormat)
				name = baseName[:baseName.rindex("-")] + "." + mldFormat["extension"]
				codecs.open(name,"w",encoding="utf8").write(text)
				print "Output file %s successfully generated." % name
		except:
			print "Problem during MLD generation."
	
	def prettyDict(self,name,l):
		if l:
			s = "%-"+str(max(len(k) for (k,_) in l)+3)+"s"
			return ["%s = {\n\t%s\n}" % (name,"\n\t".join(["%s: %s," % (s % ("u'%s'" % k),("%4d" % v if type(v) is int else ("% .2f" % v if type(v) is float else repr(v)))) for (k,v) in l]))]
		return []